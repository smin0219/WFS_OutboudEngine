using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ExpMQManager.Data;
using System.Data;

namespace ExpMQManager.DAL
{
    public class AwdDAC : BaseDAC
    {
        public AwdEntity GetAWDInfoDAC(int mid, int flightSeq, string msgType, string subType, int queueId)
        {
            BaseEntity baseAWB = GetBaseAWBInfoDAC(mid, flightSeq, msgType, subType, queueId);

            string strSql = "";
            strSql = @" SELECT MIN(FlightNo) FlightNo, SUM(OnPcs) Pcs, SUM(OnWeight) Weight, MIN(Partial) Partial,
	                          (SELECT TOP 1 DocAvailDate FROM imp_FlightStats WHERE FlightSeq = {1}) DocAvailDate, MIN(cnee) cnee
                        FROM ePic_FlightMaster A
                        JOIN ePic_Master2 B ON A.MID = B.MID
                        WHERE A.MID = {0} AND FlightSeq = {1}
                        GROUP BY A.MID
                    ";
            strSql = string.Format(strSql, mid, flightSeq);

            return GetAWDfromReader(baseAWB, ExecuteReader(strSql));
        }

        public AwdEntity GetAWDfromReader(BaseEntity baseEntity, IDataReader reader)
        {
            if (!reader.IsClosed)
            {
                reader.Read();

                int pcs = 0; try { pcs = (int)reader["Pcs"]; }
                catch { }
                double weight = 0.00; try { weight = Convert.ToDouble(reader["Weight"].ToString()); }
                catch (Exception e) { }

                AwdEntity awdEntity = new AwdEntity(
                    baseEntity,
                    pcs,
                    weight,
                    reader["Partial"].ToString().Trim(),
                    (DateTime)reader["DocAvailDate"],
                    reader["cnee"].ToString().Trim());

                reader.Close();
                return awdEntity;
            }
            else
            {
                AwdEntity awdEntity = new AwdEntity();
                return awdEntity;
            }
        }
    }
}
