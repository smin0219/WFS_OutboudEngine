using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ExpMQManager.Data;
using System.Data;

namespace ExpMQManager.DAL
{
    public class FwbDAC : BaseDAC
    {
        public FwbEntity GetFWBInfoDAC(int mid, int flightSeq, string msgType, string subType, int queueId)
        {
            BaseEntity baseAWB = GetBaseAWBInfoDAC(mid, flightSeq, msgType, subType, queueId);

            string strSql = "";
            strSql = @"  SELECT MID ,Shipper ,ShpAddr ,ShpAddr2 ,ShpAddrCity 
	                           ,ShpAddrState ,ShpAddrZipcode ,Cnee ,CneeAddr ,CneeAddrCity
	                           ,CneeAddrProvince ,CneeAddrCountry ,CneeAddrZipcode ,AgentName ,AgentCode
	                           ,AgentCity ,Currency ,WTVAL ,WTVAL2 ,WTVAL3 ,DVCarriage 
	                           ,DVCustoms ,Insurance ,AgentCassAddr
                               ,(SELECT TOP 1 Acode FROM Location WHERE Lcode = Exp_Master.Lcode) Acode 
                         FROM Exp_Master 
                         WHERE MID = {0}
                    ";
            strSql = string.Format(strSql, mid);

            FwbEntity fwbEntity = GetFWBfromReader(baseAWB, ExecuteReader(strSql));

            //Obtaining Rate Data
            strSql = @"   SELECT MID ,PCs ,Weight ,Class ,ChargeWeight
                                ,Rate ,Total ,Type ,NatureGoods
                         FROM Exp_IATA
                         WHERE MID = {0}
                    ";
            strSql = string.Format(strSql, mid);

            fwbEntity = AddRateValFromReader(fwbEntity, ExecuteReader(strSql));

            //Obtaining Rate Data
            strSql = @"   SELECT MID ,PcsWeight ,Width ,Lenght
                                ,Height ,unit ,Pcs ,VolWeight
                         FROM Exp_DimWt
                         WHERE MID = {0}
                    ";
            strSql = string.Format(strSql, mid);

            fwbEntity = AddVolumeFromReader(fwbEntity, ExecuteReader(strSql));

            //Obtaining Rate Data
            strSql = @"   SELECT MID ,ChargeCode ,ChargeTo Entitlement, Amount ChargeAmt, Type PrepaidIndicator
                         FROM EXP_OtherCharge
                         WHERE MID = {0}
                    ";
            strSql = string.Format(strSql, mid);

            fwbEntity = AddOtherChargeFromReader(fwbEntity, ExecuteReader(strSql));


            return fwbEntity;
        }

        public FwbEntity GetFWBfromReader(BaseEntity baseEntity, IDataReader reader)
        {
            FwbEntity fwbEntity = new FwbEntity();
            if (reader.Read())
            {
                double carriageVal = 0.00; try { carriageVal = Convert.ToDouble(reader["DVCarriage"].ToString()); }
                catch (Exception e) { }
                double customVal = 0.00; try { customVal = Convert.ToDouble(reader["DVCustoms"].ToString()); }
                catch (Exception e) { }
                double insuranceVal = 0.00; try { insuranceVal = Convert.ToDouble(reader["Insurance"].ToString()); }
                catch (Exception e) { }

                fwbEntity = new FwbEntity(
                    baseEntity,
                    reader["Shipper"].ToString().Trim(),
                    reader["ShpAddr"].ToString().Trim(),
                    reader["ShpAddr2"].ToString().Trim(),
                    reader["ShpAddrCity"].ToString().Trim(),
                    reader["ShpAddrState"].ToString().Trim(),
                    reader["ShpAddrZipcode"].ToString().Trim(),
                    reader["Cnee"].ToString().Trim(),
                    reader["CneeAddr"].ToString().Trim(),
                    reader["CneeAddrCity"].ToString().Trim(),
                    reader["CneeAddrProvince"].ToString().Trim(),
                    reader["CneeAddrCountry"].ToString().Trim(),
                    reader["CneeAddrZipcode"].ToString().Trim(),
                    reader["AgentName"].ToString().Trim(),
                    reader["AgentCode"].ToString().Trim(),
                    reader["AgentCassAddr"].ToString().Trim(),
                    reader["AgentCity"].ToString().Trim(),
                    reader["Currency"].ToString().Trim(),
                    reader["WTVAL"].ToString().Trim(),
                    reader["WTVAL2"].ToString().Trim(),
                    reader["WTVAL3"].ToString().Trim(),
                    carriageVal,
                    customVal,
                    insuranceVal,
                    reader["Acode"].ToString().Trim());

                reader.Close();
                return fwbEntity;
            }

            return fwbEntity;
        }

        public FwbEntity AddRateValFromReader(FwbEntity fwbEntity, IDataReader reader)
        {

            while (reader.Read())
            {
                int pcs = 0; try { pcs = (int)reader["pcs"]; }
                catch { }
                double weight = 0.00; try { weight = Convert.ToDouble(reader["Weight"].ToString()); }
                catch (Exception e) { }
                double chgWeight = 0.00; try { chgWeight = Convert.ToDouble(reader["ChargeWeight"].ToString()); }
                catch (Exception e) { }
                double rateChg = 0.00; try { rateChg = Convert.ToDouble(reader["Rate"].ToString()); }
                catch (Exception e) { }
                double total = 0.00; try { total = Convert.ToDouble(reader["Total"].ToString()); }
                catch (Exception e) { }

                FwbRateEntity fwbRateEntity = new FwbRateEntity(
                    pcs,
                    weight,
                    reader["Class"].ToString(),
                    chgWeight,
                    rateChg,
                    total,
                    reader["Type"].ToString(),
                    reader["NatureGoods"].ToString());

                fwbEntity.colRTD.Add(fwbRateEntity);
            }

            return fwbEntity;

        }

        public FwbEntity AddVolumeFromReader(FwbEntity fwbEntity, IDataReader reader)
        {

            while (reader.Read())
            {
                int pcs = 0; try { pcs = (int)reader["pcs"]; }
                catch { }
                double pcsWeight = 0.00; try { pcsWeight = Convert.ToDouble(reader["pcsWeight"].ToString()); }
                catch (Exception e) { }
                double length = 0.00; try { length = Convert.ToDouble(reader["Lenght"].ToString()); }
                catch (Exception e) { }
                double width = 0.00; try { width = Convert.ToDouble(reader["width"].ToString()); }
                catch (Exception e) { }
                double height = 0.00; try { height = Convert.ToDouble(reader["height"].ToString()); }
                catch (Exception e) { }
                double volWeight = 0.00; try { volWeight = Convert.ToDouble(reader["volWeight"].ToString()); }
                catch (Exception e) { }


                FwbVolumeEntity fwbVolEntity = new FwbVolumeEntity(
                    pcsWeight,
                    width,
                    length,
                    height,
                    reader["unit"].ToString(),
                    pcs,
                    volWeight);

                fwbEntity.colVol.Add(fwbVolEntity);
            }

            return fwbEntity;

        }

        public FwbEntity AddOtherChargeFromReader(FwbEntity fwbEntity, IDataReader reader)
        {

            while (reader.Read())
            {
                double chargeAmt = 0.00; try { chargeAmt = Convert.ToDouble(reader["ChargeAmt"].ToString()); }
                catch (Exception e) { }


                FwbOtherChargeEntity fwbOtherChargeEntity = new FwbOtherChargeEntity(
                    reader["PrepaidIndicator"].ToString(),
                    reader["ChargeCode"].ToString(),
                    reader["Entitlement"].ToString(),
                    chargeAmt);

                fwbEntity.colCharge.Add(fwbOtherChargeEntity);
            }

            return fwbEntity;

        }

    }
}
